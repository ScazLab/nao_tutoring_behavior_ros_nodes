// Generated by gencpp from file nao_tutoring_behaviors/TabletMsg.msg
// DO NOT EDIT!


#ifndef NAO_TUTORING_BEHAVIORS_MESSAGE_TABLETMSG_H
#define NAO_TUTORING_BEHAVIORS_MESSAGE_TABLETMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nao_tutoring_behaviors
{
template <class ContainerAllocator>
struct TabletMsg_
{
  typedef TabletMsg_<ContainerAllocator> Type;

  TabletMsg_()
    : msgType()
    , questionNumOrPart(0)
    , questionType()
    , robotSpeech()
    , otherInfo()  {
    }
  TabletMsg_(const ContainerAllocator& _alloc)
    : msgType(_alloc)
    , questionNumOrPart(0)
    , questionType(_alloc)
    , robotSpeech(_alloc)
    , otherInfo(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msgType_type;
  _msgType_type msgType;

   typedef int64_t _questionNumOrPart_type;
  _questionNumOrPart_type questionNumOrPart;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _questionType_type;
  _questionType_type questionType;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robotSpeech_type;
  _robotSpeech_type robotSpeech;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _otherInfo_type;
  _otherInfo_type otherInfo;




  typedef boost::shared_ptr< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TabletMsg_

typedef ::nao_tutoring_behaviors::TabletMsg_<std::allocator<void> > TabletMsg;

typedef boost::shared_ptr< ::nao_tutoring_behaviors::TabletMsg > TabletMsgPtr;
typedef boost::shared_ptr< ::nao_tutoring_behaviors::TabletMsg const> TabletMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nao_tutoring_behaviors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nao_tutoring_behaviors': ['/root/catkin_ws/src/nao_tutoring_behaviors/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91adf65652058fd1f9f3cb4c9af0c9c7";
  }

  static const char* value(const ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91adf65652058fd1ULL;
  static const uint64_t static_value2 = 0xf9f3cb4c9af0c9c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nao_tutoring_behaviors/TabletMsg";
  }

  static const char* value(const ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string msgType\n\
int64 questionNumOrPart\n\
string questionType\n\
string robotSpeech\n\
string otherInfo\n\
";
  }

  static const char* value(const ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgType);
      stream.next(m.questionNumOrPart);
      stream.next(m.questionType);
      stream.next(m.robotSpeech);
      stream.next(m.otherInfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TabletMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nao_tutoring_behaviors::TabletMsg_<ContainerAllocator>& v)
  {
    s << indent << "msgType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msgType);
    s << indent << "questionNumOrPart: ";
    Printer<int64_t>::stream(s, indent + "  ", v.questionNumOrPart);
    s << indent << "questionType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.questionType);
    s << indent << "robotSpeech: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robotSpeech);
    s << indent << "otherInfo: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.otherInfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAO_TUTORING_BEHAVIORS_MESSAGE_TABLETMSG_H
